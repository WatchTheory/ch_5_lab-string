# -*- coding: utf-8 -*-
"""Copy of üìö Lesson - Strings

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BddzdkZzmvUfcOVbycwy7xx3M2f72KeV

<div>
<img src="https://coursereport-s3-production.global.ssl.fastly.net/uploads/school/logo/219/original/CT_LOGO_NEW.jpg" width=60>
</div>

#  **Strings**

*Be sure to be following along with the lesson page before progressing in this notebook!*

## **üõù¬†Practice Playground** - Section 1
In Python, strings are sequences of characters used to store and manipulate text. They are enclosed in quotes and can use either single quotes (') or double quotes ("), allowing for flexibility depending on the content of the string itself.
"""

# Run this cell!

'Hello, world!'

# Run this cell!

print('Hello, world!')

# Run this cell!

print("Line one\nLine two")

# Run this cell!

print("Name:\tJohn")

# Run this cell!

# NOTE: You will receive an error because no escape character is used!
# Python believes you are trying to end the sentence earlier than intended.

print('It's a sunny day.')

# Run this cell!

print('It\'s a sunny day.')

# Run this cell!

# NOTE: You will receive an error because no escape character is used!
# Python believes you are trying to end the sentence earlier than intended.

print("He said, "Hello!"")

# Run this cell!

print("He said, \"Hello!\"")

# Run this cell!

multi_line_string = """This is a string that spans
multiple lines. We can easily write text over several
lines without using escape characters for new lines."""
print(multi_line_string)

"""---

## **üõù¬†Practice Playground** - Section 2
In Python, string manipulation is not only powerful but also intuitive, allowing you to perform a variety of operations that can modify and combine strings in useful ways. Understanding these operations will enable you to handle text data more effectively.
"""

# Run this cell!

greeting = "Hello"
name = "Alice"
message = greeting + ", " + name + "!"
message

# Run this cell!

laugh = "Ha"
laugh * 10

# Run this cell!

'*' * 10

# Run this cell!

print(' ' * 9 + '*' * 1)
print(' ' * 8 + '*' * 3)
print(' ' * 7 + '*' * 5)
print(' ' * 6 + '*' * 7)
print(' ' * 5 + '*' * 9)
print(' ' * 4 + '*' * 11)
print(' ' * 3 + '*' * 13)
print(' ' * 2 + '*' * 15)
print(' ' * 1 + '*' * 17)
print(' ' * 0 + '*' * 19)
print(' ' * 8 + '|||')
print(' ' * 8 + '|||')

"""---

## **üõù¬†Practice Playground** - Section 3
Python strings come equipped with numerous built-in methods that allow you to perform common tasks such as converting to uppercase, capitalizing, or replacing parts of the string.
"""

# Run this cell!

quote = "practice makes perfect"
print(quote.upper())
print(quote.title())
print(quote.lower())

# Run this cell!

sentence = "The weather is nice"
sentence.replace("nice", "wonderful")

# Run this cell!

sentence = "The weather is nice"
sentence.split(" ")

# Run this cell!

# NOTE: The default is to split on a space! This is why this cell and the one above result in the same output.

sentence = "The weather is nice"
sentence.split()

# Run this cell!

sentence = "The weather is nice"
sentence.split("w")

"""## **üõù¬†Practice Playground** - Section 4
F-strings, introduced in Python 3.6, offer a highly readable way to embed expressions inside string literals directly. By using curly braces {}, you can incorporate variables, expressions, and formatted output seamlessly into your strings.
"""

# Run this cell!

name = "Alice"
age = 30
greeting = f"Hello, my name is {name} and I am {age} years old."
greeting

# Run this cell!

hours = 8
rate = 15.75
pay = f"Total pay: ${hours * rate}"
pay

# Run this cell!

pi = 3.1415926535
formatted_pi = f"Pi rounded to two decimal places: {pi:.2f}"
formatted_pi

# Run this cell!

large_number = 1000000
formatted_number = f"Formatted number: {large_number:,}"
formatted_number

# Run this cell!

quantity = 5
formatted_quantity = f"Quantity: {quantity:03d}"
formatted_quantity

"""## **üõù¬†Practice Playground** - Section 5
Strings in Python can be indexed using positive and negative numbers. Positive indices start from 0 at the beginning of the string, while negative indices start from -1 at the end.
"""

# Run this cell!

bootcamp = "Coding Temple"
bootcamp[0]

# Run this cell!

bootcamp[-1]

# Run this cell!

bootcamp[:6]

# Run this cell!

bootcamp[7:]

# Run this cell!

bootcamp[:-1]

# Run this cell!

bootcamp[::-1]

# Run this cell!

bootcamp[1:10:2]